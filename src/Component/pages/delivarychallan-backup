import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { Link, useNavigate } from "react-router-dom";
import { submitChallanForm } from "../../redux/action";
import { fetchClients } from "../../redux/actions/clientActions";
import { fetchSalesReps } from "../../redux/actions/representativeActions";
import { fetchMakes } from "../../redux/actions/makeActions";
import { fetchWarehouses } from "../../redux/actions/warehouseActions";

import { addDeliveryChallan, getNextDONumber } from "../../redux/actions/deliveryChallanActions";

const ChallanAdd = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();

  const { adding, addError, addSuccess } = useSelector(
    (state) => state.deliveryChallan
  );

  const [formData, setFormData] = useState({
    party_name: '',
    bill_to_address: '',
    gst_no: '',
    ship_to_party_name: '',
    ship_to_address: '',
    payment_terms: '',
    do_date: '',
    sales_rep: '',
    do_number: '',
    client_id: '',
    date: '',
    items: [
      {
        item: '',
        make: '',
        pcs: '',
        qty_mt: '',
        rate_mt: '',
        loading: '',
        eff_rate: '',
        warehouse: '',
        status: '',
      },
    ],
    order_notes: '',
    warehouse_notes: '',
    transport_notes: '',
    freight: '',
    courier_options: '',
    mtc: '',
  });

  // Handle field changes
  const handleChange = (e, section = null, index = null) => {
    const { name, value } = e.target;

    if (section === 'items') {
      const updatedItems = [...formData.items];
      updatedItems[index][name] = value;
      setFormData((prev) => ({ ...prev, items: updatedItems }));
    } else {
      setFormData((prev) => ({ ...prev, [name]: value }));
    }
  };

  // Add or delete items dynamically
  const addItem = (index) => {
    const newItems = [...formData.items];
    newItems.splice(index + 1, 0, { item_name: '', quantity: '', unit: '' });
    setFormData((prev) => ({ ...prev, items: newItems }));
  };

  const deleteItem = (index) => {
    const newItems = [...formData.items];
    if (newItems.length > 1) {
      newItems.splice(index, 1);
      setFormData((prev) => ({ ...prev, items: newItems }));
    }
  };

  // Submit form
  const handleSubmit = (e) => {
    e.preventDefault();
    dispatch(addDeliveryChallan(formData));
    console.log(formData);
  };

  // Redirect on success
  useEffect(() => {
    if (addSuccess) {
      alert('Delivery Challan added successfully!');
      navigate('/delivery-challan');
    }
  }, [addSuccess, navigate]);
  // .............ADD LOGIN ENDED

  const makes = useSelector((state) => state.make?.makes || []);

  const warehouses = useSelector((state) => state.warehouse?.warehouses || []);

  const clients = useSelector((state) => state.client.clients);
  // console.log(clients);

  const representatives = useSelector(
    (state) => state.salesRep.representatives
  );

  useEffect(() => {
    dispatch(fetchWarehouses());
  }, [dispatch]);

  useEffect(() => {
    dispatch(fetchMakes());
  }, [dispatch]);

  useEffect(() => {
    dispatch(fetchSalesReps());
  }, [dispatch]);

  //   console.log(representatives);

  useEffect(() => {
    dispatch(fetchClients());
  }, [dispatch]);

  const [shipToAddressList, setShipToAddressList] = useState([]);
  const [selectedClientId, setSelectedClientId] = useState("");

  const [selectedFreight, setSelectedFreight] = useState("");
  const [fixValue, setFixValue] = useState("");
  const [perTonValue, setPerTonValue] = useState("");

  // .....INPUT FIELDS STATES.....
  const [partyName, setPartyName] = useState("");
  const [billToAddress, setBillToAddress] = useState("");
  const [gstNo, setGstNo] = useState("");
  const [shipToPartyName, setShipToPartyName] = useState("");
  const [shipToAddress, setShipToAddress] = useState("");
  const [paymentTerms, setPaymentTerms] = useState("");
  const [dODate, setDoDate] = useState("");
  const [dONumber, setDoNumber] = useState("");
  const [salesRep, setSalesRep] = useState("");
  const [partyPoNumber, setPartyPoNumber] = useState("");
  const [partyPoDate, setPartyPoDate] = useState("");
  const [orderNote, setOrderNote] = useState("");
  const [deliveryNote, setDeliveryNote] = useState("");
  const [transportNote, setTransportNote] = useState("");
  const [freightInput, setfreightInput] = useState("");
  const [courierOptionsInput, setCourierOptionsInput] = useState("");
  const [mTCInput, setMTCInput] = useState("");
  const [isChecked, setIsChecked] = useState(false);

  const handleFreightChange = (e) => {
    setSelectedFreight(e.target.value);
  };

  useEffect(() => {
    dispatch(fetchClients());
  }, [dispatch]);

  const handlePartyChange = (e) => {
    const selectedId = e.target.value;
    setSelectedClientId(selectedId);

    const client = clients.find((c) => c.id === parseInt(selectedId));

    if (client) {
      setPartyName(client.company_name || "");
      setGstNo(client.gst_no || "");

      // Bill To
      const billing = client.billing_address || {};
      const billToFullAddress = [
        billing.address_line1,
        billing.address_line2,
        billing.city,
        billing.state,
        billing.postal_code,
        billing.country,
      ]
        .filter(Boolean)
        .join(", ");
      setBillToAddress(billToFullAddress);

      // Ship To
      setShipToPartyName(client.company_name || "");

      const shippingAddresses = Array.isArray(client.shipping_addresses)
        ? client.shipping_addresses
        : [];
      setShipToAddressList(shippingAddresses);

      if (shippingAddresses.length > 0) {
        const firstAddress = shippingAddresses[0];
        const fullShipTo = [
          firstAddress.address_line1,
          firstAddress.address_line2,
          firstAddress.city,
          firstAddress.state,
          firstAddress.postal_code,
          firstAddress.country,
        ]
          .filter(Boolean)
          .join(", ");
        setShipToAddress(fullShipTo);
      } else {
        setShipToAddress("");
      }
    } else {
      setPartyName("");
      setGstNo("");
      setBillToAddress("");
      setShipToPartyName("");
      setShipToAddressList([]);
      setShipToAddress("");
    }
  };

  // add challan
  const [alert, setAlert] = useState(null);
  const [loading, setLoading] = useState(false);

  // const handleSubmitChallan = async (e) => {
  //   e.preventDefault();
  //   setAlert(null);

  //   if (
  //     !partyName.trim() ||
  //     !billToAddress.trim() ||
  //     !gstNo.trim() ||
  //     !shipToPartyName.trim() ||
  //     !shipToAddress.trim() ||
  //     (!isChecked && !paymentTerms.trim()) || // skip if 'Advance' is checked
  //     !dODate.trim() ||
  //     !dONumber.trim() ||
  //     !salesRep.trim() ||
  //     !partyPoNumber.trim() ||
  //     !partyPoDate.trim() ||
  //     !orderNote.trim() ||
  //     !deliveryNote.trim() ||
  //     !transportNote.trim() ||
  //     !freightInput.trim() ||
  //     !courierOptionsInput.trim() ||
  //     !mTCInput.trim()
  //   ) {
  //     setAlert("Please fill in all required fields.");
  //     return;
  //   }

  //   const challanPayload = {
  //     party_id: partyName,
  //     bill_to_address: billToAddress,
  //     gst_no: gstNo,
  //     ship_to_party_name: shipToPartyName,
  //     ship_to_address: shipToAddress,
  //     payment_terms: isChecked ? "Advance" : paymentTerms,
  //     do_date: dODate,
  //     do_no: dONumber,
  //     sales_rep_id: salesRep,
  //     party_po_no: partyPoNumber,
  //     party_po_date: partyPoDate,
  //     order_note: orderNote,
  //     delivery_note: deliveryNote,
  //     transport_note: transportNote,
  //     freight_type: selectedFreight,
  //     freight_value:
  //       selectedFreight === "fix"
  //         ? fixValue
  //         : selectedFreight === "perTon"
  //           ? perTonValue
  //           : "",
  //     items: [
  //       {
  //         item: "Steel Rod",
  //         make_id: "1",
  //         pcs: "20",
  //         qty_mt: "1.5",
  //         rate_mt: "50000",
  //         loading: "1000",
  //         effective_rate: "51000",
  //         warehouse_id: "2",
  //         status: "Pending",
  //       },
  //     ],
  //     courier_option: courierOptionsInput,
  //     mtc_option: mTCInput,
  //   };

  //   const result = await dispatch(addDeliveryChallan(challanPayload));

  //   if (result.ok) {
  //     alert("Delivery Challan Added Successfully!");
  //     navigation("/delivery-challan");
  //   } else {
  //     setAlert(result.message || "Something went wrong.");
  //   }
  // };

  // GST FORMAT


  const [isValidGST, setIsValidGST] = useState(true);

  const GST_REGEX = /^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9]{1}Z[0-9]{1}$/;

  const handleGstChange = (e) => {
    const input = e.target.value.toUpperCase();

    // Allow only alphanumeric and max 15 characters
    if (/^[0-9A-Z]*$/.test(input) && input.length <= 15) {
      setGstNo(input);

      // Validate format only if 15 characters
      if (input.length === 15) {
        setIsValidGST(GST_REGEX.test(input));
      } else {
        setIsValidGST(true); // not enough characters yet
      }
    }
  };



  // D.O.NUMBER 
  const challans = useSelector((state) => state.deliveryChallan.challans);
  const [manualEntry, setManualEntry] = useState(false);

  // Auto-generate D.O. No (you can replace this with your logic)
  useEffect(() => {
    if (!manualEntry) {
      const nextDO = getNextDONumber(challans);
      setDoNumber(nextDO);
    }
    // If manualEntry is true, keep current dONumber and allow typing
  }, [challans, manualEntry]);

  return (
    <>
      <div className="container-fluid">
        <div className=" main-content">
          <p className="main-container-title">
            Dashboard <i className="fa-solid fa-angles-right"></i> Delivery
            Challan <i className="fa-solid fa-angles-right"></i> Edit
          </p>
          <div className="delivery-challan-top-title-container ">
            <h3 className="main-container-title">Delivery Challan</h3>
            <div className="export-addnew-btn0-container">
              {/* <a href=""><i className="fa-solid fa-download"></i> Export Now</a> */}
              <Link to="/delivery-challan">Go Back</Link>
            </div>
          </div>

          {/* MAIN DATA */}
          <form
            className="challan-add-main-right-container py-5"
            onSubmit={handleSubmit}
          >
            <div className="form-section client-info-container client-info-container">
              <h3 className="">Delivery Challan</h3>
              <div className="py-3">
                <div className="row">
                  <div className="col-md-6 ">
                    <div className="party-name">
                      <label>Party Name</label>
                      <select
                        className="delivery-challan-dropdown-field"
                        value={partyName}
                        onChange={handlePartyChange}
                      >
                        <option
                          value="Select Party Name"
                          onChange={(e) => setPartyName(e.target.value)}
                          required
                        >
                          {partyName ? partyName : "Select Party Name"}
                        </option>
                        {clients.map((client) => (
                          <option key={client.id} value={client.id}>
                            {client.company_name}
                          </option>
                        ))}
                      </select>
                    </div>
                    {/* <div className="party-name">
                      <label> Bill To Address</label>
                      <input
                        type="text"
                        placeholder="Enter Your Bill To Address"
                        value={billToAddress}
                        onChange={(e) => setBillToAddress(e.target.value)}
                      />
                    </div> */}
                    <div className="party-name">
                      <label> Bill To Address</label>
                      <input
                        type="text"
                        placeholder="Enter Your Bill To Address"
                        name="bill_to_address"
                        value={formData.bill_to_address}
                        onChange={handleChange}
                      />
                    </div>
                    <div className="party-name">
                      <label>GST No</label>
                      <input
                        type="text"
                        placeholder="Enter Your GST No"
                        value={gstNo}
                        onChange={handleGstChange}
                        style={{
                          borderColor: gstNo && !isValidGST ? "red" : "#ccc"
                        }}
                      />
                      {!isValidGST && (
                        <small style={{ color: "red" }}>
                          Invalid GST number format
                        </small>
                      )}
                    </div>
                    <div className="party-name">
                      <label>Ship To Party Name</label>
                      <input
                        type="text"
                        placeholder="Enter Your Ship To Party Name"
                        value={shipToPartyName}
                        onChange={(e) => setShipToPartyName(e.target.value)}
                      />
                    </div>
                    <div className="party-name">
                      <label>Ship To Address</label>
                      <select
                        className="delivery-challan-dropdown-field"
                        value={shipToAddress}
                        onChange={(e) => setShipToAddress(e.target.value)}
                      >
                        {shipToAddressList.length === 0 && (
                          <option value="">No shipping addresses</option>
                        )}
                        {shipToAddressList.map((address, index) => {
                          const fullAddress = [
                            address.address_line1,
                            address.address_line2,
                            address.city,
                            address.state,
                            address.postal_code,
                            address.country,
                          ]
                            .filter(Boolean)
                            .join(", ");
                          return (
                            <option key={index} value={fullAddress}>
                              {fullAddress}
                            </option>
                          );
                        })}
                      </select>
                    </div>

                    <div className="party-name">
                      <label>Payment Terms</label>
                      <div className="delivery-chall-payment-check-box">
                        {/* Payment input field (disabled when checkbox is checked) */}
                        <input
                          type="text"
                          placeholder="Enter Your Payment Terms"
                          value={paymentTerms}
                          onChange={(e) => setPaymentTerms(e.target.value)}
                          className="form-control"
                          disabled={isChecked}
                        />

                        {/* Checkbox */}
                        <div className="form-check d-flex align-items-center">
                          <input
                            type="checkbox"
                            className="form-check-input"
                            id="termsCheckbox"
                            checked={isChecked}
                            onChange={(e) => setIsChecked(e.target.checked)}
                            style={{
                              width: "18px",
                              height: "18px",
                              cursor: "pointer",
                            }}
                          />
                          <label
                            className="form-check-label ms-2"
                            htmlFor="termsCheckbox"
                            style={{ margin: 0, cursor: "pointer" }}
                          >
                            Advance
                          </label>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div className="col-md-6">
                    <div className="party-name">
                      <label> D.O. Date</label>
                      <input
                        type="date"
                        placeholder="Enter Your D.O. Date"
                        value={dODate}
                        onChange={(e) => setDoDate(e.target.value)}
                      />
                    </div>
                    <div className="party-name">
                      <label>D.O. No</label>

                      <div className="delivery-chall-payment-check-box">
                        {/* D.O. No input field (readOnly based on checkbox) */}
                        <input
                          type="text"
                          placeholder="Enter D.O. Number"
                          name="do_number"
                          value={formData.do_number}
                          onChange={handleChange}
                          className="form-control"
                          readOnly={!manualEntry} // 👈 only editable if manualEntry is true
                        />

                        {/* Checkbox to toggle manual entry */}
                        <div className="form-check d-flex align-items-center">
                          <input
                            type="checkbox"
                            className="form-check-input"
                            id="manualEntry"
                            checked={manualEntry}
                            onChange={(e) => setManualEntry(e.target.checked)}
                            style={{
                              width: "18px",
                              height: "18px",
                              cursor: "pointer",
                            }}
                          />
                          <label
                            className="form-check-label ms-2"
                            htmlFor="manualEntry"
                            style={{ margin: 0, cursor: "pointer" }}
                          >
                            Type
                          </label>
                        </div>
                      </div>
                    </div>


                    <div className="party-name">
                      <label>Sales Rep.</label>
                      <select
                        className="delivery-challan-dropdown-field"
                        value={salesRep}
                        onChange={(e) => setSalesRep(e.target.value)}
                      >
                        <option value="">Select a Sales Representative</option>
                        {representatives.map((rep) => (
                          <option key={rep.id} value={rep.id}>
                            {rep.name}
                          </option>
                        ))}
                      </select>
                    </div>

                    <div className="party-name">
                      <label>Party P.O. No</label>
                      <input
                        type="text"
                        placeholder="Enter Your P.O. No"
                        name="party_po_no"
                        value={formData.party_po_no}
                        onChange={handleChange}
                      />
                    </div>
                    <div className="party-name">
                      <label>Party P.O. No Date</label>
                      <input
                        type="date"
                        placeholder="Enter Your Ship To Address"
                        value={partyPoDate}
                        onChange={(e) => setPartyPoDate(e.target.value)}
                      />
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div className="form-section client-info-container">
              <h3 className="mb-3">Item Information</h3>

              {/* Column Labels */}
              <div className="row text-muted fw-bold mb-2 border-bottom pb-2 text-center small">
                <div className="col-1">No.</div>
                <div className="col-1">Item</div>
                <div className="col-1">Make</div>
                <div className="col-1">Pcs</div>
                <div className="col-1 text-nowrap">Qty (MT)</div>
                <div className="col-1 text-nowrap">Rate / MT</div>
                <div className="col-1">Loading</div>
                <div className="col-1 text-nowrap">Eff. Rate</div>
                <div className="col-1">Warehouse</div>
                <div className="col-1">Status</div>
                <div className="col-1">Actions</div>
              </div>

              {/* Row 1 */}
              <div className="row align-items-center mb-3 text-center">
                <div className="col-1 fw-semibold">01.</div>

                <div className="col-1">
                  <input
                    type="text"
                    className="form-control form-control-sm"
                    placeholder="Item"
                  />
                </div>

                <div className="col-1">
                  <select className="form-select form-select-sm">
                    <option value="">Make</option>
                    {makes.map((make) => (
                      <option key={make.id} value={make.id}>
                        {make.name}
                      </option>
                    ))}
                  </select>
                </div>

                <div className="col-1">
                  <input
                    type="text"
                    className="form-control form-control-sm"
                    placeholder="Pcs"
                  />
                </div>

                <div className="col-1">
                  <input
                    type="text"
                    className="form-control form-control-sm"
                    placeholder="Qty"
                  />
                </div>

                <div className="col-1">
                  <input
                    type="text"
                    className="form-control form-control-sm"
                    placeholder="Rate"
                  />
                </div>

                <div className="col-1">
                  <input
                    type="number"
                    className="form-control form-control-sm"
                    placeholder="Loading"
                  />
                </div>

                <div className="col-1">
                  <input
                    type="text"
                    className="form-control form-control-sm"
                    placeholder="Eff. Rate"
                    disabled
                  />
                </div>

                <div className="col-1">
                  <select className="form-select form-select-sm">
                    <option>Warehouse</option>
                    {warehouses.map((warehouse) => (
                      <option key={warehouse.id} value={warehouse.id}>
                        {warehouse.warehouse_name}
                      </option>
                    ))}
                  </select>
                </div>

                <div className="col-1">
                  <select className="form-select form-select-sm">
                    <option>Status</option>
                    <option>Pending</option>
                    <option>Planning Given</option>
                    <option>Ready for Dispatch</option>
                  </select>
                </div>

                <div className="col-1 d-flex justify-content-center gap-1">
                  <button className="btn btn-sm item-info-btns">
                    <i className="fa fa-plus"></i>
                  </button>
                  <button className="btn btn-sm item-info-btns">
                    <i className="fa fa-trash"></i>
                  </button>
                </div>
              </div>
            </div>

            <div className="form-section client-info-container client-info-container">
              <h3 className="">Notes</h3>
              <div className="py-3">
                <div className="row">
                  <div className="col-md-12 ">
                    <div className="party-name">
                      <label>Order Notes</label>
                      <textarea
                        type="text"
                        placeholder="Enter Your Order Note"
                        name="order_notes"
                        value={formData.order_notes}
                        onChange={handleChange}
                      />
                    </div>
                    <div className="party-name">
                      <label> Warehouse/Delivery Notes</label>
                      <textarea
                        type="text"
                        placeholder="Enter Warehouse/Delivery Notes"
                        name="warehouse_notes"
                        value={formData.warehouse_notes}
                        onChange={handleChange}
                      />
                    </div>
                    <div className="party-name">
                      <label> Transport Notes</label>
                      <textarea
                        type="text"
                        placeholder="Enter Your Transport Notes"
                        name="transport_notes"
                        value={formData.transport_notes}
                        onChange={handleChange}
                      />
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div className="form-section client-info-container client-info-container">
              {/* <h3 className=''>Notes</h3> */}
              <div className="row mb-3 align-items-center">
                <div className="col-sm-2 fw-semibold">Freight</div>
                <div className="col-sm freight-main-container">
                  {/* To Pay */}
                  <div className="freight-option">
                    <input
                      className="form-check-input"
                      type="radio"
                      name="freight"
                      id="freightToPay"
                      value="toPay"
                      onChange={handleFreightChange}
                    />
                    <label
                      className="form-check-label ms-1"
                      htmlFor="freightToPay"
                    >
                      To Pay
                    </label>
                  </div>

                  {/* Inclusive */}
                  <div className="freight-option">
                    <input
                      className="form-check-input"
                      type="radio"
                      name="freight"
                      id="freightInclusive"
                      value="inclusive"
                      onChange={handleFreightChange}
                    />
                    <label
                      className="form-check-label ms-1"
                      htmlFor="freightInclusive"
                    >
                      Inclusive
                    </label>
                  </div>

                  {/* Fix */}
                  <div className="freight-option">
                    <input
                      className="form-check-input"
                      type="radio"
                      name="freight"
                      id="freightFix"
                      value="fix"
                      onChange={handleFreightChange}
                    />
                    <label
                      className="form-check-label ms-1"
                      htmlFor="freightFix"
                    >
                      Fix
                    </label>
                    {selectedFreight === "fix" && (
                      <input
                        type="text"
                        value={fixValue}
                        onChange={(e) => setFixValue(e.target.value)}
                        className="form-control ms-2"
                        style={{ width: "100px" }}
                        placeholder="Fix Value"
                      />
                    )}
                  </div>

                  {/* Per TON */}
                  <div className="freight-option">
                    <input
                      className="form-check-input"
                      type="radio"
                      name="freight"
                      id="freightPerTon"
                      value="perTon"
                      onChange={handleFreightChange}
                    />
                    <label
                      className="form-check-label ms-1"
                      htmlFor="freightPerTon"
                    >
                      Per TON
                    </label>
                    {selectedFreight === "perTon" && (
                      <input
                        type="text"
                        value={perTonValue}
                        onChange={(e) => setPerTonValue(e.target.value)}
                        className="form-control ms-2"
                        style={{ width: "100px" }}
                        placeholder="Per Ton Value"
                      />
                    )}
                  </div>
                </div>
              </div>

              {/* <!-- Courier Options --> */}
              <div className="row mb-3 align-items-center border-top pt-3">
                <div className="col-sm-2 fw-semibold">Courier Options</div>
                <div className="col-sm freight-main-container">
                  <div className="form-check form-check-inline freight-option">
                    <input
                      className="form-check-input"
                      type="radio"
                      name="courier"
                      id="courierNR"
                    />
                    <label className="form-check-label" htmlFor="courierNR">
                      N / R
                    </label>
                  </div>
                  <div className="form-check form-check-inline freight-option">
                    <input
                      className="form-check-input"
                      type="radio"
                      name="courier"
                      id="courierInvoice"
                    />
                    <label
                      className="form-check-label"
                      htmlFor="courierInvoice"
                    >
                      Invoice Only
                    </label>
                  </div>
                  <div className="form-check form-check-inline freight-option">
                    <input
                      className="form-check-input"
                      type="radio"
                      name="courier"
                      id="courierTCINV"
                    />
                    <label className="form-check-label" htmlFor="courierTCINV">
                      TC+INV
                    </label>
                  </div>
                  <div className="form-check form-check-inline freight-option">
                    <input
                      className="form-check-input"
                      type="radio"
                      name="courier"
                      id="courierAll"
                    />
                    <label className="form-check-label" htmlFor="courierAll">
                      TC+INV+LR
                    </label>
                  </div>
                </div>
              </div>

              {/* <!-- MTC --> */}
              <div className="row mb-3 align-items-center border-top pt-3">
                <div className="col-sm-2 fw-semibold">MTC</div>
                <div className="col-sm freight-main-container">
                  <div className="form-check form-check-inline freight-option">
                    <input
                      className="form-check-input"
                      type="radio"
                      name="mtc"
                      id="mtcNR"
                    />
                    <label className="form-check-label" htmlFor="mtcNR">
                      N / R
                    </label>
                  </div>
                  <div className="form-check form-check-inline freight-option">
                    <input
                      className="form-check-input"
                      type="radio"
                      name="mtc"
                      id="mtcMatchTC"
                    />
                    <label className="form-check-label" htmlFor="mtcMatchTC">
                      Only Matching TC
                    </label>
                  </div>
                  <div className="form-check form-check-inline freight-option">
                    <input
                      className="form-check-input"
                      type="radio"
                      name="mtc"
                      id="mtcEndorsement"
                    />
                    <label
                      className="form-check-label"
                      htmlFor="mtcEndorsement"
                    >
                      With Endorsement
                    </label>
                  </div>
                </div>
              </div>
            </div>

            <div className="chllan-page-form-btn-container">
              <button type="submit" className="submit-btn" disabled={loading}>
                {loading ? "Submitting…" : "Submit"}
              </button>
              <button type="reset" className="clear-btn">
                Clear
              </button>
            </div>
            {adding && <p className="text-info mt-3">Submitting...</p>}
            {addError && <p className="text-danger mt-3">Error: {addError}</p>}
          </form>
        </div>
      </div>
    </>
  );
};

export default ChallanAdd;
